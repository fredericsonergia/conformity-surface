import sys

sys.path.append("./src")

import cli.batchs as b
import cli.confidence as c
import os
import unittest
import pickle
import json

class TestStringMethods(unittest.TestCase):

    def test_batch(self):
        print("----- Test Batch -----")

        static = "src/test/test_data/static/"
        data = "src/test/test_data/data/"
        file = "src/test/test_data/batch/coords_test.csv"
        output_file = "src/test/test_data/batch/output_test.json"
        w, h, r, R = 800, 400, 6, 100
        model = pickle.load(open("src/test/test_data/confidence/binary_model.sav", 'rb'))
        computer = b.BatchComputer(static_path=static, data_path=data, file_name=file, MAJ=True)
        computer.load_data()
        computer.extract_coordinates()
        computer.get_all(w, h, r, R, model)
        computer.save(output_file)
        wanted_output = ['[{"surface": 216.453923143839, "coords": [2.1120532, 48.860686], "fileName": "/static/2.1120532,48.860686/205,4020,1,2,3,4,5,6,7,8,9.png", "contours": [[[[412, 0]], [[412, 31]], [[411, 32]], [[411, 57]], [[409, 59]], [[405, 59]], [[404, 58]], [[402, 58]], [[402, 66]], [[401, 67]], [[401, 76]], [[420, 76]], [[421, 77]], [[464, 77]], [[465, 78]], [[484, 78]], [[484, 56]], [[485, 55]], [[485, 33]], [[481, 33]], [[479, 31]], [[479, 7]], [[480, 6]], [[480, 0]]], [[[731, 0]], [[732, 0]], [[733, 1]], [[734, 1]], [[736, 3]], [[737, 3]], [[738, 4]], [[739, 4]], [[741, 6]], [[742, 6]], [[743, 7]], [[744, 7]], [[746, 9]], [[747, 9]], [[749, 11]], [[750, 11]], [[751, 12]], [[752, 12]], [[754, 14]], [[755, 14]], [[756, 15]], [[757, 15]], [[759, 17]], [[760, 17]], [[761, 18]], [[762, 18]], [[764, 20]], [[765, 20]], [[766, 21]], [[767, 21]], [[769, 23]], [[770, 23]], [[771, 24]], [[772, 24]], [[774, 26]], [[775, 26]], [[777, 28]], [[778, 28]], [[780, 26]], [[780, 25]], [[781, 24]], [[781, 23]], [[783, 21]], [[783, 20]], [[784, 19]], [[784, 18]], [[786, 16]], [[786, 15]], [[787, 14]], [[787, 13]], [[789, 11]], [[789, 10]], [[791, 8]], [[791, 7]], [[792, 6]], [[792, 5]], [[794, 3]], [[794, 2]], [[795, 1]], [[795, 0]]], [[[320, 175]], [[320, 176]], [[318, 178]], [[318, 179]], [[316, 181]], [[316, 182]], [[314, 184]], [[314, 185]], [[311, 188]], [[311, 189]], [[309, 191]], [[309, 192]], [[307, 194]], [[307, 195]], [[305, 197]], [[305, 198]], [[302, 201]], [[302, 202]], [[300, 204]], [[300, 205]], [[298, 207]], [[298, 208]], [[296, 210]], [[296, 211]], [[297, 211]], [[301, 215]], [[302, 215]], [[305, 218]], [[306, 218]], [[309, 221]], [[310, 221]], [[312, 223]], [[312, 225]], [[310, 227]], [[310, 228]], [[308, 230]], [[308, 231]], [[305, 234]], [[305, 235]], [[303, 237]], [[303, 238]], [[304, 238]], [[306, 240]], [[307, 240]], [[309, 242]], [[310, 242]], [[313, 245]], [[314, 245]], [[316, 247]], [[317, 247]], [[319, 249]], [[320, 249]], [[323, 252]], [[324, 252]], [[326, 254]], [[327, 254]], [[329, 256]], [[330, 256]], [[333, 259]], [[334, 259]], [[336, 261]], [[337, 261]], [[339, 263]], [[340, 263]], [[343, 266]], [[344, 266]], [[346, 268]], [[347, 268]], [[349, 270]], [[350, 270]], [[352, 272]], [[353, 272]], [[355, 274]], [[355, 276]], [[354, 277]], [[354, 278]], [[352, 280]], [[352, 281]], [[351, 282]], [[351, 283]], [[352, 283]], [[354, 285]], [[355, 285]], [[357, 287]], [[358, 287]], [[360, 289]], [[361, 289]], [[363, 291]], [[364, 291]], [[366, 293]], [[367, 293]], [[368, 294]], [[369, 294]], [[369, 293]], [[371, 291]], [[371, 290]], [[373, 288]], [[373, 287]], [[376, 284]], [[376, 283]], [[378, 281]], [[378, 280]], [[380, 278]], [[380, 277]], [[383, 274]], [[383, 273]], [[385, 271]], [[385, 270]], [[387, 268]], [[387, 267]], [[390, 264]], [[390, 263]], [[392, 261]], [[392, 260]], [[394, 258]], [[394, 257]], [[397, 254]], [[397, 253]], [[399, 251]], [[399, 250]], [[401, 248]], [[401, 247]], [[404, 244]], [[404, 243]], [[406, 241]], [[406, 240]], [[408, 238]], [[408, 237]], [[410, 235]], [[410, 234]], [[413, 231]], [[413, 230]], [[415, 228]], [[415, 227]], [[417, 225]], [[417, 224]], [[416, 224]], [[414, 222]], [[413, 222]], [[410, 219]], [[409, 219]], [[407, 217]], [[406, 217]], [[403, 214]], [[402, 214]], [[400, 212]], [[399, 212]], [[399, 213]], [[397, 215]], [[397, 216]], [[395, 218]], [[395, 219]], [[394, 220]], [[392, 220]], [[390, 218]], [[389, 218]], [[387, 216]], [[386, 216]], [[383, 213]], [[382, 213]], [[379, 210]], [[378, 210]], [[376, 208]], [[375, 208]], [[372, 205]], [[371, 205]], [[369, 203]], [[368, 203]], [[365, 200]], [[364, 200]], [[362, 198]], [[361, 198]], [[358, 195]], [[357, 195]], [[355, 193]], [[354, 193]], [[351, 190]], [[350, 190]], [[348, 188]], [[347, 188]], [[344, 185]], [[343, 185]], [[341, 183]], [[339, 185]], [[339, 186]], [[338, 187]], [[336, 187]], [[334, 185]], [[333, 185]], [[329, 181]], [[328, 181]], [[325, 178]], [[324, 178]], [[321, 175]]], [[[621, 250]], [[618, 253]], [[618, 254]], [[611, 261]], [[611, 262]], [[605, 268]], [[610, 273]], [[611, 273]], [[617, 279]], [[618, 279]], [[623, 284]], [[624, 284]], [[629, 289]], [[630, 289]], [[631, 288]], [[631, 287]], [[635, 283]], [[635, 282]], [[640, 277]], [[640, 276]], [[645, 271]], [[645, 270]], [[643, 268]], [[642, 268]], [[636, 262]], [[635, 262]], [[629, 256]], [[628, 256]], [[622, 250]]], [[[741, 280]], [[740, 281]], [[740, 282]], [[737, 285]], [[737, 286]], [[734, 289]], [[734, 291]], [[735, 292]], [[736, 292]], [[738, 294]], [[739, 294]], [[741, 296]], [[742, 296]], [[744, 298]], [[745, 298]], [[747, 300]], [[748, 300]], [[750, 302]], [[751, 302]], [[751, 301]], [[754, 298]], [[754, 297]], [[757, 294]], [[756, 294]], [[749, 287]], [[748, 287]], [[746, 285]], [[746, 284]], [[744, 282]], [[743, 282]]], [[[113, 319]], [[113, 320]], [[112, 321]], [[112, 326]], [[111, 327]], [[111, 332]], [[110, 333]], [[110, 338]], [[109, 339]], [[109, 344]], [[108, 345]], [[108, 348]], [[106, 350]], [[103, 350]], [[102, 349]], [[101, 349]], [[101, 350]], [[100, 351]], [[100, 356]], [[99, 357]], [[99, 362]], [[98, 363]], [[98, 368]], [[97, 369]], [[97, 374]], [[96, 375]], [[96, 381]], [[95, 382]], [[95, 387]], [[94, 388]], [[94, 393]], [[93, 394]], [[93, 399]], [[134, 399]], [[134, 398]], [[135, 397]], [[135, 391]], [[136, 390]], [[136, 387]], [[138, 385]], [[140, 385]], [[141, 386]], [[142, 386]], [[142, 384]], [[143, 383]], [[143, 379]], [[145, 377]], [[147, 377]], [[148, 378]], [[149, 377]], [[149, 373]], [[150, 372]], [[150, 367]], [[151, 366]], [[150, 365]], [[148, 365]], [[146, 363]], [[146, 360]], [[147, 359]], [[147, 357]], [[146, 356]], [[144, 356]], [[142, 354]], [[142, 351]], [[143, 350]], [[143, 344]], [[144, 343]], [[144, 337]], [[145, 336]], [[145, 335]], [[144, 334]], [[139, 334]], [[138, 333]], [[133, 333]], [[132, 332]], [[129, 332]], [[127, 330]], [[127, 326]], [[128, 325]], [[128, 323]], [[127, 322]], [[123, 322]], [[122, 321]], [[119, 321]], [[118, 320]], [[114, 320]]], [[[752, 333]], [[747, 338]], [[747, 339]], [[739, 347]], [[739, 348]], [[730, 357]], [[730, 358]], [[722, 366]], [[722, 367]], [[723, 367]], [[728, 372]], [[729, 372]], [[732, 375]], [[733, 375]], [[734, 376]], [[735, 376]], [[736, 377]], [[737, 377]], [[739, 379]], [[740, 379]], [[742, 381]], [[743, 381]], [[744, 382]], [[745, 382]], [[747, 384]], [[748, 384]], [[750, 386]], [[751, 386]], [[752, 387]], [[753, 387]], [[755, 389]], [[756, 389]], [[758, 391]], [[759, 391]], [[760, 392]], [[761, 392]], [[763, 394]], [[764, 394]], [[766, 396]], [[767, 396]], [[768, 397]], [[768, 398]], [[769, 399]], [[793, 399]], [[797, 395]], [[797, 394]], [[799, 392]], [[799, 365]], [[796, 362]], [[795, 362]], [[792, 359]], [[791, 359]], [[788, 356]], [[787, 356]], [[784, 353]], [[783, 353]], [[780, 350]], [[779, 350]], [[779, 351]], [[778, 352]], [[776, 352]], [[773, 349]], [[772, 349]], [[768, 345]], [[767, 345]], [[763, 341]], [[762, 341]], [[758, 337]], [[757, 337]], [[753, 333]]]], "surfaces": [171.45373677164324, 30.846094873893996, 216.453923143839, 27.78430735378595, 10.11795033401632, 11.130612670758431, 96.52429652897453], "metrics": [{"label": "Tau", "value": 0.06348497868865254}, {"label": "DeltaD", "value": 0.5897052965699509}, {"label": "DeltaS", "value": 1.6850046734951682}, {"label": "TauLignes", "value": 0.018989951677547655}, {"label": "conf", "value": 1.0}]}]']
        output =  open(output_file, 'r')
        json_dict = json.loads(output.read())[0]
        surface = json_dict["surface"]
        self.assertEqual(surface, 216.453923143839)
        self.assertEqual(json_dict["coords"], [2.1120532, 48.860686])
        self.assertTrue("/static/2.1120532,48.860686/205,4020,1,2,3,4,5,6,7,8,9.png" in json_dict["fileName"])
        self.assertEqual(json_dict["metrics"], [{"label": "Tau", "value": 0.06348497868865254}, 
                                                {"label": "DeltaD", "value": 0.5897052965699509}, 
                                                {"label": "DeltaS", "value": 1.6850046734951682}, 
                                                {"label": "TauLignes", "value": 0.018989951677547655}, 
                                                {"label": "conf", "value": 1.0}])
        output.close()
        os.remove(output_file)


    def test_confidence_test(self):
        print("----- Test Confidence Test -----")

        config_file = "src/test/test_data/test.config"
        output_file = "src/test/test_data/confidence/test_output.csv"
        builder = c.ConfidenceBuilder(config_file)
        builder.test(save=True, output_file=output_file)
        file =  open(output_file, 'r')
        output = file.read()
        wanted_output = '1;0,1174407861849998;1,0308625988989482;0,5117576050523772;0,08858009333742663;0,04182347754459609\n'
        self.assertEqual(output, wanted_output)
        file.close()
        os.remove(output_file)
        
    
if __name__ == '__main__':
    unittest.main()